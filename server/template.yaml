AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  NCTU_BBS

Parameters:
  DomainName:
    Type: String
    Default: bbs.oscarhsu.me
    Description: The domain name of the application
  CertificateArn:
    Type: String
    Default: arn:aws:acm:ap-northeast-1:440374182634:certificate/3705c935-a0cf-4c05-a49a-19f84d98ae4b
    Description: The HTTPS certificate ARN of the domain name
  Prefix:
    Type: String
    Default: nctu-bbs
    Description: Prefix of resources of the application
  BucketPrefix:
    Type: String
    Default: oscarhsu-nctu-bbs
    Description: Prefix of S3 Bucket of the application

Globals:
  Function:
    Timeout: 60
    Environment:
      Variables:
        PREFIX: !Ref Prefix
        BUCKET_PREFIX: !Ref BucketPrefix
        BOARDS_TABLE: !Join ["-", [!Ref Prefix, "boards"]]
        POSTS_TABLE: !Join ["-", [!Ref Prefix, "posts"]]
        ID_TABLE: !Join ["-", [!Ref Prefix, "next-id"]]
        CONNECTION_TABLE: !Join ["-", [!Ref Prefix, "connection-id"]]
        AUTHOR_SUB_TABLE: !Join ["-", [!Ref Prefix, "author-sub"]]
        BOARD_SUB_TABLE: !Join ["-", [!Ref Prefix, "board-sub"]]

Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UserPoolName: nctu-bbs-user-pool
      AutoVerifiedAttributes:
      - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
          TemporaryPasswordValidityDays: 365

  UserPoolTokenClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
      - USER_PASSWORD_AUTH

  UserPoolResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties: 
      Identifier: !Ref DomainName
      Name: nctu-bbs-resource-server
      Scopes: 
        - ScopeDescription: auth.token
          ScopeName: auth.token
      UserPoolId: !Ref UserPool

  BoardsTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: name
          AttributeType: S
      KeySchema: 
        - AttributeName: name
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: !Join
                  - '-'
                  - - !Ref Prefix
                    - 'boards'
  PostsTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: id
          AttributeType: N
      KeySchema: 
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: !Join
                  - '-'
                  - - !Ref Prefix
                    - 'posts'

  IdTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: name
          AttributeType: S
      KeySchema: 
        - AttributeName: name
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: !Join
                  - '-'
                  - - !Ref Prefix
                    - 'next-id'

  ConnectionTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: username
          AttributeType: S
      KeySchema: 
        - AttributeName: username
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: !Join
                  - '-'
                  - - !Ref Prefix
                    - 'connection-id'

  AuthorSubTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: subscribe
          AttributeType: S
      KeySchema: 
        - AttributeName: subscribe
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: !Join
                  - '-'
                  - - !Ref Prefix
                    - 'author-sub'

  BoardSubTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: subscribe
          AttributeType: S
      KeySchema: 
        - AttributeName: subscribe
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: !Join
                  - '-'
                  - - !Ref Prefix
                    - 'board-sub'


  NctuBBSApi:
    Type: AWS::Serverless::Api
    Properties:
      Domain: 
        CertificateArn: !Ref CertificateArn
        DomainName: !Ref DomainName
      StageName: dev
      Auth:
        Authorizers: 
          NctuBbsApiAuthorizer:
            Identity:
              Header: Auth
            UserPoolArn: !GetAtt UserPool.Arn

  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties: 
      Name: !Join ["-", [!Ref Prefix, "websocket"]]
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: "$connect"
      AuthorizationType: NONE
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectionIntegration

  ConnectionIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Connection Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectionFunction.Arn}/invocations

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: "$disconnect"
      AuthorizationType: NONE
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectIntegration

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectionFunction.Arn}/invocations

  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: "$default"
      AuthorizationType: NONE
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DefaultIntegration

  DefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Default Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectionDefaultFunction.Arn}/invocations

  WebsocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - DefaultRoute
    - DisconnectRoute
    Properties:
      ApiId: !Ref WebSocketApi

  WebsocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: dev
      Description: dev
      DeploymentId: !Ref WebsocketDeployment
      ApiId: !Ref WebSocketApi

  WebsocketLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !GetAtt ConnectionFunction.Arn
      SourceArn: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'

  WebsocketLambdaPermission1:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !GetAtt ConnectionDefaultFunction.Arn
      SourceArn: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
      - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess

  ConnectionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/connection/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn

  ConnectionDefaultFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/connection/
      Handler: app.default
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      
      
  GreetingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/hello_world/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /hello
            Method: get
            RestApiId: !Ref NctuBBSApi

  RegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/register/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Register:
          Type: Api
          Properties:
            Path: /register
            Method: post
            RestApiId: !Ref NctuBBSApi

  CreateBoardFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/create_board/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        CreateBoard:
          Type: Api
          Properties:
            Auth:
              Authorizer: NctuBbsApiAuthorizer
            Path: /create-board
            Method: post
            RestApiId: !Ref NctuBBSApi

  CreatePostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/create_post/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        CreatePost:
          Type: Api
          Properties:
            Auth:
              Authorizer: NctuBbsApiAuthorizer
            Path: /create-post
            Method: post
            RestApiId: !Ref NctuBBSApi

  ListBoardFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/list_board/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        ListBoard:
          Type: Api
          Properties:
            Path: /list-board
            Method: post
            RestApiId: !Ref NctuBBSApi

  ListPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/list_post/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        ListPost:
          Type: Api
          Properties:
            Path: /list-post
            Method: post
            RestApiId: !Ref NctuBBSApi

  ReadPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/read/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        ReadPost:
          Type: Api
          Properties:
            Path: /read
            Method: post
            RestApiId: !Ref NctuBBSApi

  DeletePostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/delete_post/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        DeletePost:
          Type: Api
          Properties:
            Auth:
              Authorizer: NctuBbsApiAuthorizer
            Path: /delete-post
            Method: post
            RestApiId: !Ref NctuBBSApi

  UpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/update/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Update:
          Type: Api
          Properties:
            Auth:
              Authorizer: NctuBbsApiAuthorizer
            Path: /update
            Method: post
            RestApiId: !Ref NctuBBSApi

  MailToFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/mail_to/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        MailTo:
          Type: Api
          Properties:
            Auth:
              Authorizer: NctuBbsApiAuthorizer
            Path: /mail-to
            Method: post
            RestApiId: !Ref NctuBBSApi

  ListMailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/list_mail/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        ListMail:
          Type: Api
          Properties:
            Auth:
              Authorizer: NctuBbsApiAuthorizer
            Path: /list-mail
            Method: get
            RestApiId: !Ref NctuBBSApi

  RetrMailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/retr_mail/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        RetrMail:
          Type: Api
          Properties:
            Auth:
              Authorizer: NctuBbsApiAuthorizer
            Path: /retr-mail
            Method: post
            RestApiId: !Ref NctuBBSApi

  DeleteMailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/delete_mail/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        DeleteMail:
          Type: Api
          Properties:
            Auth:
              Authorizer: NctuBbsApiAuthorizer
            Path: /delete-mail
            Method: post
            RestApiId: !Ref NctuBBSApi

  ListSubFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/list_sub/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        ListSub:
          Type: Api
          Properties:
            Auth:
              Authorizer: NctuBbsApiAuthorizer
            Path: /list-sub
            Method: get
            RestApiId: !Ref NctuBBSApi

  SubscribeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/subscribe/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Subscribe:
          Type: Api
          Properties:
            Auth:
              Authorizer: NctuBbsApiAuthorizer
            Path: /subscribe
            Method: post
            RestApiId: !Ref NctuBBSApi

  UnsubscribeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/unsubscribe/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Unsubscribe:
          Type: Api
          Properties:
            Auth:
              Authorizer: NctuBbsApiAuthorizer
            Path: /unsubscribe
            Method: post
            RestApiId: !Ref NctuBBSApi



Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL for Prod stage for BBS Server"
    Value: !Join ["", ["https://", !Ref DomainName]]
  UserPoolClientId:
    Description: "User Pool Client Id"
    Value: !Ref UserPoolTokenClient
  UserPoolId:
    Description: "User Pool Id"
    Value: !Ref UserPool
