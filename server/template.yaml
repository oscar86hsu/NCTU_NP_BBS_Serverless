AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  NCTU_BBS

Parameters:
  DomainName:
    Type: String
    Default: bbs.oscarhsu.me
    Description: The domain name of the application
  CertificateArn:
    Type: String
    Default: arn:aws:acm:ap-northeast-1:440374182634:certificate/3705c935-a0cf-4c05-a49a-19f84d98ae4b
    Description: The HTTPS certificate ARN of the domain name
  Prefix:
    Type: String
    Default: nctu-bbs
    Description: Prefix of resources of the application
  BucketPrefix:
    Type: String
    Default: oscarhsu-nctu-bbs
    Description: Prefix of S3 Bucket of the application

Globals:
  Function:
    Timeout: 60
    Environment:
      Variables:
        PREFIX: !Ref Prefix
        BUCKET_PREFIX: !Ref BucketPrefix
        BOARDS_TABLE: !Join ["-", [!Ref Prefix, "boards"]]
        POSTS_TABLE: !Join ["-", [!Ref Prefix, "posts"]]
        ID_TABLE: !Join ["-", [!Ref Prefix, "next-id"]]

Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UserPoolName: nctu-bbs-user-pool
      AutoVerifiedAttributes:
      - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
          TemporaryPasswordValidityDays: 365

  UserPoolTokenClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
      - USER_PASSWORD_AUTH

  UserPoolResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties: 
      Identifier: !Ref DomainName
      Name: nctu-bbs-resource-server
      Scopes: 
        - ScopeDescription: auth.token
          ScopeName: auth.token
      UserPoolId: !Ref UserPool

  BoardsTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: name
          AttributeType: S
      KeySchema: 
        - AttributeName: name
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: !Join
                  - '-'
                  - - !Ref Prefix
                    - 'boards'
  PostsTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: id
          AttributeType: N
      KeySchema: 
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: !Join
                  - '-'
                  - - !Ref Prefix
                    - 'posts'

  IdTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: name
          AttributeType: S
      KeySchema: 
        - AttributeName: name
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: !Join
                  - '-'
                  - - !Ref Prefix
                    - 'next-id'

  NctuBBSApi:
    Type: AWS::Serverless::Api
    Properties:
      Domain: 
        CertificateArn: !Ref CertificateArn
        DomainName: !Ref DomainName
      StageName: dev
      Auth:
        Authorizers: 
          NctuBbsApiAuthorizer:
            Identity:
              Header: Auth
            UserPoolArn: !GetAtt UserPool.Arn


  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
      - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess

  GreetingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/hello_world/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /hello
            Method: get
            RestApiId: !Ref NctuBBSApi

  RegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/register/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Register:
          Type: Api
          Properties:
            Path: /register
            Method: post
            RestApiId: !Ref NctuBBSApi

  CreateBoardFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/create_board/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Register:
          Type: Api
          Properties:
            Auth:
              Authorizer: NctuBbsApiAuthorizer
            Path: /create-board
            Method: post
            RestApiId: !Ref NctuBBSApi

  CreatePostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/create_post/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Register:
          Type: Api
          Properties:
            Auth:
              Authorizer: NctuBbsApiAuthorizer
            Path: /create-post
            Method: post
            RestApiId: !Ref NctuBBSApi

  ListBoardFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/list_board/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Register:
          Type: Api
          Properties:
            Path: /list-board
            Method: post
            RestApiId: !Ref NctuBBSApi

  ListPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/list_post/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Register:
          Type: Api
          Properties:
            Path: /list-post
            Method: post
            RestApiId: !Ref NctuBBSApi

  ReadPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/read/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Register:
          Type: Api
          Properties:
            Path: /read
            Method: post
            RestApiId: !Ref NctuBBSApi

  DeletePostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/delete_post/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Register:
          Type: Api
          Properties:
            Auth:
              Authorizer: NctuBbsApiAuthorizer
            Path: /delete-post
            Method: post
            RestApiId: !Ref NctuBBSApi

  UpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/update/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Register:
          Type: Api
          Properties:
            Auth:
              Authorizer: NctuBbsApiAuthorizer
            Path: /update
            Method: post
            RestApiId: !Ref NctuBBSApi

  MailToFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/mail_to/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Register:
          Type: Api
          Properties:
            Auth:
              Authorizer: NctuBbsApiAuthorizer
            Path: /mail-to
            Method: post
            RestApiId: !Ref NctuBBSApi

  ListMailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/list_mail/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Register:
          Type: Api
          Properties:
            Auth:
              Authorizer: NctuBbsApiAuthorizer
            Path: /list-mail
            Method: get
            RestApiId: !Ref NctuBBSApi

  RetrMailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/retr_mail/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Register:
          Type: Api
          Properties:
            Auth:
              Authorizer: NctuBbsApiAuthorizer
            Path: /retr-mail
            Method: post
            RestApiId: !Ref NctuBBSApi

  DeleteMailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/delete_mail/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Register:
          Type: Api
          Properties:
            Auth:
              Authorizer: NctuBbsApiAuthorizer
            Path: /delete-mail
            Method: post
            RestApiId: !Ref NctuBBSApi
          


Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL for Prod stage for BBS Server"
    Value: !Join ["", ["https://", !Ref DomainName]]
  UserPoolClientId:
    Description: "User Pool Client Id"
    Value: !Ref UserPoolTokenClient
  UserPoolId:
    Description: "User Pool Id"
    Value: !Ref UserPool
